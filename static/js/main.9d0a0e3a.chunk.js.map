{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getColour","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","_ref2","colors","wrap","_context","prev","next","fetch","sent","json","abrupt","value","stop","apply","this","arguments","ColourBlock","_ref3","_ref3$colour","colour","_ref3$onClick","onClick","react_default","createElement","className","css","_templateObject","App","_useState","useState","_useState2","slicedToArray","backgroundColour","setBackgroundColour","_useState3","_useState4","textShadow","setTextShadow","_useState5","_useState6","textColour","setTextColour","_useState7","_useState8","buttonCount","setButtonCount","_useStoredState","useStoredState","_useStoredState2","savedColours","setSavedColours","useEffect","then","c","Color","isLight","darken","string","handleColourClick","_templateObject2","_templateObject3","_templateObject4","Array","from","Set","concat","toConsumableArray","_templateObject5","App_ColourBlock","hex","lighten","saturate","desaturate","rotate","_templateObject6","_templateObject7","map","key","_templateObject8","filter","d","handleColourRemove","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d0a0e3a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {css} from 'emotion';\nimport Color from 'color';\nimport useStoredState from 'react-captain/useStoredState';\n\nconst getColour = async () => {\n  const response = await fetch('https://api.noopschallenge.com/hexbot');\n  const {colors} = await response.json();\n\n  return colors[0].value;\n};\n\nconst ColourBlock = ({colour = '', onClick = () => {}}) => (\n  <span\n    onClick={() => onClick(colour)}\n    className={css`\n      display: inline-block;\n      width: 30px;\n      height: 30px;\n      background: ${colour};\n      border: 1px solid #000;\n    `}\n  />\n);\n\nconst App = () => {\n  const [backgroundColour, setBackgroundColour] = useState('');\n  const [textShadow, setTextShadow] = useState('');\n  const [textColour, setTextColour] = useState('');\n  const [buttonCount, setButtonCount] = useState(0);\n  const [savedColours, setSavedColours] = useStoredState('colours', []);\n\n  useEffect(\n    () => {\n      getColour().then(c => {\n        const colour = Color(c);\n        const textColour = colour.isLight() ? '#000' : '#fff';\n        const textShadow = colour.darken(0.4).string();\n\n        setTextColour(textColour);\n        setTextShadow(textShadow);\n        setBackgroundColour(c);\n      });\n    },\n    [buttonCount],\n  );\n\n  const handleButtonClick = () => {\n    setButtonCount(buttonCount + 1);\n  };\n\n  const handleSaveButtonClick = () => {\n    setSavedColours(Array.from(new Set([...savedColours, backgroundColour])));\n  };\n\n  const handleColourRemove = c => {\n    setSavedColours(savedColours.filter(d => d !== c));\n  };\n\n  const handleColourClick = c => {\n    const colour = Color(c);\n    const textColour = colour.isLight() ? '#000' : '#fff';\n    const textShadow = colour.darken(0.4).string();\n\n    setTextColour(textColour);\n    setTextShadow(textShadow);\n    setBackgroundColour(c);\n  };\n\n  if (!backgroundColour) return null;\n\n  return (\n    <div\n      className={css`\n        background: ${backgroundColour};\n        color: ${textColour};\n        text-shadow: 1px 1px 2px ${textShadow};\n        width: 100vw;\n        height: 100vh;\n        display: flex;\n      `}>\n      <div\n        className={css`\n          flex-grow: 10;\n        `}>\n        <header>\n          <h1\n            className={css`\n              margin: 0 20px;\n              padding: 1em 0;\n              display: inline-block;\n            `}>\n            {backgroundColour}\n          </h1>\n          <button onClick={handleSaveButtonClick}>Save</button>{' '}\n          <button onClick={handleButtonClick}>Random Colour</button>\n        </header>\n\n        <article\n          className={css`\n            margin-left: 20px;\n          `}>\n          <p>\n            Darker:{' '}\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .darken(0.1)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .darken(0.1)\n                    .hex(),\n                )\n              }\n            />\n          </p>\n          <p>\n            Lighter:{' '}\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .lighten(0.1)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .lighten(0.1)\n                    .hex(),\n                )\n              }\n            />\n          </p>\n          <p>\n            Saturate (10%):{' '}\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .saturate(0.1)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .saturate(0.1)\n                    .hex(),\n                )\n              }\n            />\n          </p>\n          <p>\n            Desaturate (10%):{' '}\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .desaturate(0.1)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .desaturate(0.1)\n                    .hex(),\n                )\n              }\n            />\n          </p>\n\n          <h2>Related Colours</h2>\n          <p>\n            Complementary:{' '}\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .rotate(180)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .rotate(180)\n                    .hex(),\n                )\n              }\n            />\n          </p>\n          <p>\n            Triadic Complementary:{' '}\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .rotate(120)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .rotate(120)\n                    .hex(),\n                )\n              }\n            />\n            <ColourBlock\n              colour={Color(backgroundColour)\n                .rotate(-120)\n                .string()}\n              onClick={() =>\n                handleColourClick(\n                  Color(backgroundColour)\n                    .rotate(-120)\n                    .hex(),\n                )\n              }\n            />\n          </p>\n        </article>\n      </div>\n      <div\n        className={css`\n          flex-grow: 1;\n        `}>\n        <h2>Saved Colours</h2>\n        <ul\n          className={css`\n            margin: 0;\n            padding: 0;\n          `}>\n          {savedColours.map(c => (\n            <li\n              key={c}\n              className={css`\n                list-style: none;\n                padding: 0;\n                margin: 0;\n              `}>\n              {c}{' '}\n              <ColourBlock onClick={() => handleColourClick(c)} colour={c} />{' '}\n              <button onClick={() => handleColourRemove(c)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'normalize.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}